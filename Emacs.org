* 1、不重启更新emacs设置
   在 .emacs 中， C-x C-e 执行光标前面的一条语句
   还可 M-x load-file ~/.emacs
   M-x eval-buffer
* 2、不能使用 fcitx
   可能是系统字体环境的设置问题，可把 /etc/X11/xorg.conf-vesa 中多余的字体
   路径注释掉。
* 3、org-mode 
** 使用技巧
   字体加粗 *bold*
   斜字体 /italics/
   加下划线 _underline_
** 表格
*** 添加表头
	在用 '|||' 这样的形式添加一行数据后,在行尾执行 'C-c RET' 即可生成表头.
** 链接
   修改链接：当光标置于一个链接上时，通过 'C-c C-l' 可编辑该链接.
* 4、编程相关
** 1、编译程序
   先 M-x compile 
   在出现的提示中输入编译命令，然后会出现一个 *compilation* buffer。
   编译的结果会在这个 buffer 中显示，若有错误，可在这个 buffer 中通过
   C-x `
   来顺序定位错误。若想回到第一个提示的错误，可通过
   C-u C-x `
   也可在 *compilation* buffer 中通过 M-n 或 M-p 上下移动选择错误的信
   息，然后通过 C-c C-c 来在源码中定位错误。
** 2、调试程序
   先按 M-x ，然后输入 gdb ，接着输入要调试的程序，打开后再按 M-x，输
   入 gdb-many-windows，此时会出现很棒的调试界面，共有5个 buffer：gdb
   调试 buffer、变量显示 buffer、源代码 buffer、栈 buffer、断点 buffer。
   每次设置断点或运行时会看到各种相关信息的显示，很有用处.
   可通过在 ~/.emacs 中添加如下语句，使得每次使用 gdb 调试时自动进入
   gdb-many-windows 模式：
   (setq gdb-many-windows t)
** 3、添加注释
    可通过
    M-;
    来添加 /**/ 类型的注释，且会自动调整注释出现的位置。
    若想添加多行注释，可在注释内按
    M-j
    若想去除注释，先把光标移至注释开头所在行，然后输入
    M-x kill-comment
** 4、函数标签
    先要在 shell 中执行 etags 命令，假如搜索当前目录下所有 .c 程序中的
    函数，则执行
    $ etags *.c
    此时会生成 TAGS 文件，然后在 Emacs 中执行
    M-x visit-tags-table
    确定一个 TAGS 后，就可搜索函数标签了。如，可通过如下命令来搜索特定
    的函数
    M-.
    然后输入函数名，若有多个文件中有相同的函数名，可通过
    M-,
    来继续查找。也可通过如下命令利用正则表达式来搜索某个函数
    M-x tags-search
    P.S：这种操作要多了解下，很有用。
** 5、字体高亮
    可通过
    M-x font-lock-mode 
    来打开或关闭字体语法高亮，也可在 ~/.emacs 中添加
    (global-font-lock-mode t)
    来永久打开这种模式。
    可通过
    M-x list-faces-display
    来查看 Emacs 提供的各种界面，然后可通过
    M-x modify-face 或 M-x customize-face
    来选择。
** 6、c-mode 
    M-a : 移动到句子开头
    M-e : 移动到句子结尾
    M-q : 若注释是分段的，则集合到一块儿
    C-M-a : 移动到函数开头
    C-M-e : 移动到函数结尾
    C-M-h : 标记所在函数整体
    C-c C-q : 根据缩进格式缩进整个函数
    C-c C-u : 转到目前预定义条件开头
    C-c C-p : 转到前一个预定义条件
    C-c C-n : 转到下一个预定义条件
* 5、kill 命令
   可通过 M-x kill- 然后 TAB 补全看看可能的命令，我觉得一个比较有用的
   是
   M-x kill-buffer 
   可以结束一个 buffer，然后通过 C-x 0 来关闭。
* 6、执行 shell 命令
   可通过三种方法：
   M-x shell
   M-x eshell
   M-!
   其中前两种方法都是在 Emacs 中打开一个 shell，第三种方法是一次只执行
   一条 shell 命令。
* 7、终止命令
   C-g
* 8、添加 man 帮助
   可通过 M-x man 来调用 man 帮助。也可在 ~/.emacs 中添加一个快捷键，
   如
   (global-set-key [(f8)] 'man)
* 9、搜索帮助
   C-h i
   这个很有用，各种帮助信息.
   C-c C-h
   可显示当前模式下可用的命令及其绑定键。
* 10、显示 C 函数原型
   可用 c-eldoc.el ，只能用于 C 函数，显示函数原型的首要条件
   是 #include 中包含这个函数，每次都会在 minibuffer 中自动显示。
* 11、Tab 补全获得帮助
   可以经常在 M-x 输入命令时通过 Tab 补全查看下可用的命令，这个很有帮
   助。
* 12、cedet 
*** 1、简介
    The Cedet package is a collection of serveral libraries,
    implementing differen commands, but used for one task —— provide
    functionality for work with source code written in different
    programming languages:
    1) /Semantic/ is base for construction of syntactic analyzers for
       different programming languages. This allows to provide common
       representation for information extracted from code, written in
       different languages. Using this information, Cedet & other
       packages (*JDEE* and *ECB*), can implement commands, required
       for modern development envirionment (something like Ecliplse,
       NetBeans, etc)
     2)/SemanticDB/ is included into Semantic, and implements
       interfaces to different storage modules, that keeps
       information, needed for names completion, source code
       navigation, and so on. Syntactic information could be saved
       between Emacs sessions, so it reduce need for re-parsing of not
       modified souce code.
     3)/Senator/ implements navigation in source code file, using
       information, extracted by Semantic.
     4)/Srecode/——package for source code generation, using syntactic
       information, including information, obtained from Semantic.
     5) /EDE/ implements set of extensions to work with projects ——
        user can control list of targets to build, perform build of
        project, etc. Besides this, using notion of the project, you
        can have more precise control about Semantic's opertions ——
        name completions, and so on.
     6) /Speedbar/ is used to display information about current buffer
        using different sources of information —— Semantic, some
        Specialized information providers (for texinof & html, for
        example), etc.
     7) /Eieio/ is a library, implementating CLOD-like (Common Lisp
        Object System) infrastructure for Emacs Lisp.
     8) /Cogre/ is a library for drawing of UML-like diagrams in Emacs
        buffer, with basic integration with Semantic.
*** 2、安装
   先从 SourceForge 上下载源码（CVS 版本），解压后通过
   $ emacs -Q -l cedet-build.el -f cedet-build
   或
   $ Emacs -Q -nw -l cedet-build.el -f cedet-build -f save-buffers-kill-terminal
*** 3、技巧
**** 1、跳转到函数定义
     把光标移动某个函数开头字符，然后执行
     M-x semantic-ia-fast-jump
     这就会自动跳转到函数的定义处，若想返回，则执行
     C-x B
* 13、ecb
   启动时用 M-x ecb-activate 或 M-x ecb-minor-mode 或 M-x
   ecb-byte-compile 或 M-x ecb-show-help
   很有帮助.
* 14、显示当前所有 buffer
   C-x C-b
   若想关闭某个 buffer，则通过 M-x kill-buffer 然后在出现的提示中，输
   入如下格式的 buffer 名
   *buffer_name*
* 15、放大、缩小字体
   放大字体:C-x C-+ 或 C-x C-=
   缩小字体:C-x C--
   重置字体:C-x C-0
   若要连续放大或缩小字体，第二次直接按 +、-、0 即可。
* 16、中文输入法
   可用 Emacs 自动的中文输入法，通过 C-x RET C-\ SPC 来选择，可直接通
   过 C-\ 来调用。
   也可用eim 输入法，具体配置参见 Google 搜索。
* 17、搜索
   可通过 C-s 继续查看下一个搜索结果。
   通过 C-r 继续查看上一个搜索结果。
   正则搜索：C-M-s 或 C-M-r
* 18、设置 Emacs 初始窗口大小和位置
   可在 ~/.Xdefaults 或 ~/.emacs 中修改，前者的优先级高于后者。
   在 ~/.Xdefaults 中修改方法：
   Emacs.geometry: WIDTHxHEIGHT+XOFF+YOFF
   其中后两个参数表示初始的位置。
   在 ~/.emacs 中修改方法：
   (setq default-frame-alist '((height . 35)
       (width . 100) (menu-bar-lines . 20) 
       (tool-bar-lines . 0)))
       建议第一种方法。
* 19、下载包的工具
   ELPA
   按下 M-x,输入 package-list-packages 即可看到提供的包。
* 20、查找替换字符串
   M-x replace-string 这时替换是替换完全匹配的。
   M-x replace-regexp 这时可以用正则表达式匹配替换。
   Alt+%  交互式查找替换。
* 21、另存为
   C-x C-w
* 22、安装 pymacs
   进入 pymacs 的安装包，执行
   $ python pppp -C ppppconfig.py *.in Pymacs contrib tests
   $ python setup.py install
   然后把
   pppp.rst.in pymacs.el.in pymacs.rst.in
   的后缀 '.in' 去掉后移动到 ~/.emacs.d/extensions/ 目录下。
   然后在 ~/.emacs 中加入

   ;;; Initialize Pymacs
   (autoload 'pymacs-apply "pymacs")
   (autoload 'pymacs-call "pymacs")
   (autoload 'pymacs-eval "pymacs" nil t)
   (autoload 'pymacs-exec "pymacs" nil t)
   (autoload 'pymacs-load "pymacs" nil t)
* 23、大小写转换
   M-u
   光标所在处的字符所在的单词转化为大写
   M-l
   光标所在处的字符所在的单词转化为小写
   M-c
   光标所在处的字符所在的单词首字母大写
* 24、不插网线时启动慢
   因为 Emacs 采用的是 C/S 模型，在启动时需要访问 /etc/hosts 文件，在该文件中添
   加 
   127.0.0.1 自己的hostname
   就行.
* 25、编译成字节码加快启动速度
   可把 Emacs 的 .el 文件编译成字节码来加快启动速度，方法是先打开 .el 文件，然后
   M-x emacs-lisp-byte-compile
   会生成 .elc 文件，再把这些 .elc 文件的属性加上 x 就可。
   也可使用
   M-x byte-compile-file
   命令。
   也可在 shell 中用如下命令来编译:
   $ emacs -batch -f byte-compile-file
   可以使用如下命令进行批处理:
   C-u 0 M-x byte-recompile-directory
* 26、多行注释
   选中一块儿区域，然后
   M-x comment-region
   或 
   M-;
   之后，Emacs 会根据文档的类型选择注释方法。若想取消注释，选中该区域后
   M-;
   在通过 M-x comment- 然后 TAB 键补全后可以发现其余的几种注释方法，尤其是
   comment-box 很有用。
* 27、比较不同
*** 1、ediff 功能
    ediff 可以比较两个或三个文件间的不同，也可以比较两个或三个 emacs-buffer 的不同。
    同时，它还可以把正比较的文件合并成新的文件。
    ediff 可以“忽略”某些细微的差别，例如有两个程序几乎相同，但是其中都些变量的
    命名却不一样，如 bar 变量在另一个程序中却都 foo，这对程序而言是“相同”，如
    果用一般的diff程序来查看该两程序的差别，则这种没有意义的变量名不同将充满了整
    个差异输出，从而不易找到真正的“程序不同”，而使用ediff则可以忽略这类不同，
    很容易就定位我们真正想要的差异。
*** 2、ediff 比较方法
    ediff 浏览文件的差异是在 Emacs 的两个 Buffer 上进行，分别使用不同的颜色表示所存在
    的差异.
*** 3、常用操作
    比较两个文件:
    M-x ediff
    比较三个文件:
    M-x ediff3
    在按下
    M-x ediff
    后再按 Tab 键，可发现它有很多其它功能可以用，但我常用的是这两个，其它的功能用
    的不多。
* 28、执行 elisp 语句
   在语句最后一个括号后后按 
   C-x C-e
   这样默认是在 minibuffer 中显示结果。
   也可
   C-j
   这样执行的结果会在当前语句的下一行显示。
   若在 lisp-interaction-mode 下定义了一个函数，然后在下面的语句中想要执行自定义
   的函数，则要先在函数定义后按
   C-x C-e
   然后再执行自定义的函数。
* 29、格式化代码
   C-M-\
   或
   M-x indent-region
* 30、隐藏显示代码
   配置好 outline-minor-mode 后，有如下快捷键：
   | show-all       | C-c C-a | 显示所有折叠的代码   |
   | hide-subtree   | C-c C-d | 折叠子树             |
   | show-branches  | C-c C-k | 显示子树             |
   | show-entry     | C-c C-e | 显示项中内容         |
   | hide-entry     | C-c C-c | 折叠项中内容         |
   | show-subtree   | C-c C-s | 显示子树中的所有内容 |
   | hide-sublevels | C-c C-q | 折叠展开的子树              |
* 31、去掉 ^M 、^L
   在 Linux 下用 Emacs 打开 Windows 下编辑的文件时, 可能会在每行末出现 ^M 符号，
   这是由于 Linux 和 Windows 换行的方式不同。除去该符号的方法:
   M-x replace-string RET C-q C-m RET
   注意 'C-q' 和 'C-m' 是表示按下这个组合键。

   ^L 表示 page break. 在 Emacs 中，通过 C-q C-l 可以生成该字符.
* 32、文件编码
** 设置编码
   一般可在 ~/.emacs 中添加如下形式的语句:

   (prefer-coding-system 'utf-8)
   (setq coding-system-for-reaD 'utf-8)
   (setq coding-system-for-write 'utf-8)

   然后通过 "M-x load-file ~/.emacs" 来使得当前对编码的设置生效.
** 转换编码
   在以下描述中，'<RET>' 代表回车，'coding' 代表选择的编码
   + C-x <RET> f coding <RET>
	 对应 (set-buffer-file-coding-system)
	 Use coding system coding to save or revisit the file in the current
     buffer.
   + C-x <RET> c coding <RET>
	 对应 (universal-coding-system-argument)
	 Specify coding system coding for the immediately following command.
   + C-x <RET> r coding <RET>
	 对应 (revert-buffer-with-coding-system)
	 Revisit the current file using the coding system coding.
   + M-x recode-region <RET> right <RET> wrong <RET>
	 Convert a region that was decoded using coding system wrong, decoding it
     using coding system right instead.

   Ref.:
   [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Text-Coding.html][gnu
   官网中讲解]]
** emacs 提供的各种编码的解释
   emacs 提供的各种编码最后部分，有的指示的是 EOF 采用的字符，有的指示对此编码添
   加了些额外的功能，如:
   + -mac: *CR* , the standard line delimiter with MacOS (until OS X)
   + -unix: *LF* , the standard delimiter for unix systems (so the BSD-based Mac
     OS X)
   + -dos: *CR+LF* , tehe delimiter for DOS/Windows.
   + -emacs: support for the encoding all Emacs characters (including non
     Unicode)
   + -with-signature: force the usage of the BOM
   + -auto: autodetect the BOM

   Ref.: [[http://stackoverflow.com/questions/17862846/whats-the-difference-among-various-types-of-utf-8-in-emacs][参考我在 stackoverflow 上的这个问题]]
** best practice
   + 通过 hexl-mode 查看文件的 16 进制形式
	 若怀疑文件编码的问题，可通过 hexl-mode 查看文件的 16 进制形式判断.
* 33、ffap 在文件中直接定位文件
   在 ~/.emacs 中编辑
   
   (require 'ffap)
   (global-set-key (kbd "C-4") 'ffap)
   
   之后在程序中，出现文件名的地方按下 C-4，则会显示出该文件的路径。
* 34、查看当前 Emacs 版本 
   M-x emacs-version
* 35、方便使用 Elisp 的方法
  M-x ielm
* 36、删除文件中所有空行
  M-x flush-lines
  匹配时可用如下的正则表达式:
  ^[ ]*$
* outline-minor-mode
  key             binding
  ---             -------
  C-c C-a			show-all
  C-c C-b			outline-backward-same-level
  C-c C-c			hide-entry
  C-c C-d			hide-subtree
  C-c C-e			show-entry
  C-c C-f			outline-forward-same-level
  C-c TAB			show-children
  C-c C-k			show-branches
  C-c C-l			hide-leaves
  C-c RET			outline-insert-heading
  C-c C-n			outline-next-visible-heading
  C-c C-o			hide-other
  C-c C-p			outline-previous-visible-heading
  C-c C-q			hide-sublevels
  C-c C-s			show-subtree
  C-c C-t			hide-body
  C-c C-u			outline-up-heading
  C-c C-v			outline-move-subtree-down
  C-c C-^			outline-move-subtree-up
  C-c @		    	outline-mark-subtree
  C-c C-<			outline-promote
  C-c C->			outline-demote
