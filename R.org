* 语法基础
** 注释
   以 '#' 开头.
** 赋值
   常用 '<-' 表示赋值,如

   x <- norm(5)
** 帮助文档
   | 函数                            | 功能                                       |
   | help.start()                    | web 形式打开文档首页                       |
   | help(函数名)                    | 查看函数的帮助手册                         |
   | help.search('foo')              | 以 'foo' 为关键词搜索本地帮助文档          |
   | example(函数名)                 | 函数的使用示例                             |
   | example(数据集名)              | 查看数据集中的例子                         |
   | RSiteSearch('foo')              | 以'foo' 为关键词搜索在线文档和邮件列表存档 |
   | apropos('foo', mode='function') | 列出名称中含有 'foo' 的所有可用函数        |
   | data()                          | 列出当前已加载包中所含的所有可用示例数据集 |
   | vignette()                      | 列出当前已安装包中所有可用的 vignette 文档 |
   | vignette('foo')                 | 为主题 'foo' 显示指定的 vignette 文档      |
** 管理工作空间
   | 函数                               | 功能                                                           |
   | getwd()                            | 显示当前的工作目录                                             |
   | setwd('目录路径')                  | 修改当前的工作目录为 '目录路径' (setwd() 不会生成不存在的目录) |
   | ls()                               | 列出当前工作空间中的对象                                       |
   | rm(object_list)                    | 删除一个或多个对象                                             |
   | help(options)                      | 显示可用选项的说明                                             |
   | options()                          | 显示或设置当前选项                                             |
   | history(数目或空)                  | 显示最近使用过的 n 个命令，默认为 25 个                        |
   | savehistory('文件路径')            | 保存命令历史到指定文件中 (默认值为 .Rhistory)                  |
   | loadhistory('文件路径')            | 载入一个命令历史文件 (默认值为 .Rhistory)                      |
   | save.image('文件路径')             | 保存工作空间到指定文件中 (默认为 .RData)                       |
   | save(object_list, file='文件路径') | 保存指定对象到一个文件中                                       |
   | load('文件路径')                   | 读取一个工作空间到当前会话中 (默认值是 .RData)                 |
** 默认值或文件
   | 数据         | 文件                 |
   | 历史命令     | 工作目录的 .Rhistory |
   | 工作空间数据 | 工作目录的 .RData         |
** 常用函数
*** source('filename')
	在当前会话中执行名为 'filename' 的脚本
*** sink('filename')
	将输出重定向到文件 'filename' 中.若文件存在，则覆盖.

    | 参数        | 作用                                     |
    |-------------+------------------------------------------|
    | append=TRUE | 将输出追加到文件后                       |
    | split=TRUE  | 输出同时发送到 stdout 和文件中(覆盖文件) |

	若使用 sink() (不加任何参数),则输出到 stdout.

	NOTE:
	+ 一般在执行命令且希望重定向这些命令的结果前,使用该命令
	+ 不会影响图形的输出,只能影响文本输出
	+ 以上两个参数可以同时使用
*** 图形重定向
	在运行输出图形的命令前,执行如下中的函数

    | 函数                         | 作用             |
    |------------------------------+------------------|
    | pdf('filename.pdf')          | pdf 文件         |
    | win.metafile('filename.wmf') | windows 图元文件 |
    | png('filename.png')          | png 文件         |
    | jpeg('filename.jpg')         | jpeg 文件        |
    | bmp('filename.bmp')          | bmp 文件         |
    | postscript('filename.ps')    | postscript 文件  |

	执行完输出图像的命令后,再执行 *dev.off()* 命令.
*** '包' 相关
	*包* 是 R 函数、数据、预编译代码以一种定义完善的格式组成的集合.

    | 函数                     | 作用                                   |
    |--------------------------+----------------------------------------|
    | .libPaths()              | 显示库的默认路径                       |
    | library()                | 显示库中的包                           |
    | library('包名')          | 载入指定的包                           |
    | install.packages()       | 通过图形界面安装包                     |
    | install.packages('包名') | 安装指定的包 (包名不区分大小写)        |
    | installed.packages()     | 查看已安装的包                         |
    | update.packages()        | 更新已安装的包                         |
    | help(package='包名')     | 查看包的简短描述及函数名、数据集名称等 |
    | ??包名                   | 查看包的详细内容                             |
** 数据结构
   包括
   + 标量
   + 向量
   + 数组
   + 数据框
   + 列表
** 数据类型
   + 数值型
   + 字符型
   + 逻辑性 (即布尔类型)
   + 复数型 (虚数)
   + 原生型 (字节)
* 概念
** 数据集
*** 创建数据集的步骤
   1、选择一种数据结构来存储数据
   2、将数据输入或导入到这个数据结构中

   创建数据集后，往往需要对它进行 _标注_ ，也就是为变量和变量代码添加描述性的标
   签.
*** 数据集的行列
   _数据集_ 通常是由数据构成的一个矩形数组，行表示 *观测* ，列表示 *变量* .
   不同行业对数据集的行和列叫法不同:

   | 行业              | 行                | 列              |
   |-------------------+-------------------+-----------------|
   | 统计学            | 观测(observation) | 变量(variable)  |
   | 数据库分析        | 记录(record)      | 字段(field)     |
   | 数据挖掘/机器学习 | 示例(example)     | 属性(attribute) |
** 实例标识符/类别型
   R 将 *实例标识符* 称为 _rownames_ (行名)，
   将 *类别型(包括 名义型 和 有序型) 变量* 称为 _因子_ (factors).
* 本地安装 R 包
  下载 R 包 (不用解压) 后，在 R 交互环境中执行:

  install.packages('R包', repos=NULL, type="source")

  即可.
* 命令行执行 R 脚本
  $ Rscript R脚本
* 安装 RODBC 失败
  若提示 "configure: error: "ODBC headers sql.h and sqlext.h not found"" 错误，
  需要先安装 "unixODBC-devel"。
  在 centos 下，直接执行:

  # yum install unixODBC-devel
* 安装 RJDBC
  依赖 DBI 和 rjava，这两个都可以通过 CRAN 安装。
* R 连 Hive
  通过 RJDBC 来连接.

  在 RStudio 中按如下步骤进行:
  
  library('DBI')
  library('rJava')
  library('RJDBC')

  for(l in list.files('/PATH/TO/hive/lib/')){ .jaddClassPath(paste("/PATH/TO/hive/lib/",l,sep=""))}
  # 下面这步很重要
  # 相同的步骤把 hadoop 的所有 jar 包全部载入进来
  for(l in list.files('/PATH/TO/hive/lib/')){ .jaddClassPath(paste("/PATH/TO/hive/lib/",l,sep=""))}
  for(l in list.files('/PATH/TO/hadoop/share/hadoop/common/')){ .jaddClassPath(paste("/PATH/TO/hadoop/share/hadoop/common/",l,sep=""))}
  for(l in list.files('/PATH/TO/hadoop/share/hadoop/common/lib/')){ .jaddClassPath(paste("/PATH/TO/hadoop/share/hadoop/common/lib/",l,sep=""))}
  for(l in list.files('/PATH/TO/hadoop/share/hadoop/common/sources/')){ .jaddClassPath(paste("/PATH/TO/hadoop/share/hadoop/common/sources/",l,sep=""))}
  for(l in list.files('/PATH/TO/hadoop/share/hadoop/hdfs/')){ .jaddClassPath(paste("/PATH/TO/hadoop/share/hadoop/hdfs/",l,sep=""))}
  for(l in list.files('/PATH/TO/hadoop/share/hadoop/hdfs/lib/')){ .jaddClassPath(paste("/PATH/TO/hadoop/share/hadoop/hdfs/lib/",l,sep=""))}
  for(l in list.files('/PATH/TO/hadoop/share/hadoop/hdfs/sources/')){ .jaddClassPath(paste("/PATH/TO/hadoop/share/hadoop/hdfs/sources/",l,sep=""))}
  for(l in list.files('/PATH/TO/hadoop/share/hadoop/httpfs/tomcat//lib')){ .jaddClassPath(paste("/PATH/TO/hadoop/share/hadoop/httpfs/tomcat//lib",l,sep=""))}
  for(l in list.files('/PATH/TO/hadoop/share/hadoop/mapreduce/')){ .jaddClassPath(paste("/PATH/TO/hadoop/share/hadoop/mapreduce/",l,sep=""))}
  for(l in list.files('/PATH/TO/hadoop/share/hadoop/mapreduce/lib/')){ .jaddClassPath(paste("/PATH/TO/hadoop/share/hadoop/mapreduce/lib/",l,sep=""))}
  for(l in list.files('/PATH/TO/hadoop/share/hadoop/tools/lib/')){ .jaddClassPath(paste("/PATH/TO/hadoop/share/hadoop/tools/lib/",l,sep=""))}
  for(l in list.files('/PATH/TO/hadoop/share/hadoop/tools/sources/')){ .jaddClassPath(paste("/PATH/TO/hadoop/share/hadoop/tools/sources/",l,sep=""))}
  for(l in list.files('/PATH/TO/hadoop/share/hadoop/yarn/')){ .jaddClassPath(paste("/PATH/TO/hadoop/share/hadoop/yarn/",l,sep=""))}
  for(l in list.files('/PATH/TO/hadoop/share/hadoop/yarn/lib/')){ .jaddClassPath(paste("/PATH/TO/hadoop/share/hadoop/yarn/lib/",l,sep=""))}  
  
  options( java.parameters = "-Xmx8g" )
  drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "/PATH/TO/hive/lib/hive-jdbc-0.13.1.jar")

  conn <- dbConnect(drv, "jdbc:hive2://HOST:PORT", "USER", "PORT")
* 查看所有的 jar 包路径 
  通过如下语句:
  
  .jclassPath()
