* 进程控制
** 特殊进程
   系统中有一些专用的进程，但具体实现细节因实现而异。pid 为 0 的进程通常是 
   _调度进程_ ,常被称为 _交换进程(wrapper)_ .该进程是内核的一部分，它并不执行任
   何磁盘上的程序，因此也被称为 _系统进程_ .pid 为 1 的进程通常是 init 进程，在
   自举过程结束时由内核调用。该进程在自举内核后启动一个 UNIX 系统。init 通常读与
   系统有关的初始化文件(如 /etc/rc*、/etc/inittab、/etc/init.d 中的文件), 并将系
   统引导到一个状态(如多用户)。init 进程绝不会终止。它是一个普通的用户进程(与交
   换进程不同，它不是内核中的系统进程)，但它以超级用户特权运行。
   每个 UNIX 系统实现都有它自己的一套提供 OS 服务的内核进程，如在某些 UNIX 的虚
   拟存储实现中，pid 为 2 的是页守护进程(pagedaemon)，该进程负责支持虚拟存储系统
   的分页操作。

** 深入理解 fork() 和父子进程关系
   fork() 后，将子进程 pid 返回给父进程的理由是:因为一个进程的子进程可有多个，但
   并没有一个函数使一个进程可获得其所有子进程的 pid。
   fork() 使子进程得到返回值 0 的理由是:一个进程只会有一个父进程，故子进程总是可
   以调用 getppid() 以获得其父进程的 pid (pid 0 总是由内核交换进程使用，所以一个
   子进程的 pid 不可能为 0).

   父子进程继续执行 fork() 调用之后的指令。子进程是父进程的副本，如，子进程获得
   父进程数据空间、堆和栈的副本。父子进程并不共享这些存储空间部分，父子进程共享正文段。

   由于在 fork() 后经常跟随着 exec，所以现在的很多实现并不执行一个父进程数据段、
   堆和栈的完全复制。作为替代，使用了 _写时复制(Copy-On-Write, COW)_ 技术。这些
   区域由父子进程共享，而且内核将它们的访问权限改变为只读。若父子进程中的任一个
   试图修改这些区域，则内核只为修改区域的那块内存制作一个副本，通常是虚拟存储器
   系统中的一"页"。

   fork() 的一个特性是父进程的所有打开文件描述符都被复制到子进程中，父子进程的每
   个相同的打开描述符共享一个文件表项。这种共享文件的方式使父子进程对同一文件使
   用了一个文件偏移量，即父子进程任何一个对相同的文件描述符的动作，都会影响到另
   一个进程的这个文件描述符.

   若父子进程写到同一描述符，但又没有任何形式的同步，那么它们的输出就会相互混合
   (假定所用的描述符是在 fork() 之前打开的)。虽然这种情况可能发生，但这并不是常
   用的操作模式。
   在 fork() 之后处理文件描述符有两种常见的情况:
   1)父进程等待子进程完成。在这种情况下，父进程无需对其描述符做任何处理。当子进
     程终止后,它曾进行过读、写操作的任一共享描述符的文件偏移量已执行了相应更新。
   2)父子进程各自执行不同的程序段。在这种情况下，在 fork() 后，父子进程各自关闭
     它们不需使用的文件描述符，这样就不会干扰对方使用的文件描述符。这种方法是网
	 络服务进程中经常使用的。

   使 fork() 失败的两个主要原因是:系统已有太多的进程(通常意味着某个方面除了问题)，
   或该实际 uid 的进程总数超过了系统限制。

   fork() 有下面两种用法:
   1)一个父进程希望复制自己，使父子进程同时执行不同的代码段。这在网络服务进程中
     是常见的——父进程等待客户端的服务请求。当这种请求到达时，父进程调用 fork()，
	 使子进程处理此请求。父进程则继续等待下一个服务请求到达。
   2)一个进程要执行一个不同的程序。这对 shell 是常见的情况。在这种情况下，子进程
     从 fork() 返回后立即调用 exec().
** vfork() 和 fork()
   vfork() 和 fork() 一样都创建一个子进程，但它并不将父进程的地址空间完全复制到
   子进程中，因为子进程会立即调用 exec() 或 exit()，于是也就不会存访该地址空间。
   相反，在子进程调用 exec() 或 exit() 之前，它在父进程的空间中运行。这种优化工
   作方式在某些 UNIX 的页式虚拟存储器实现中提高了效率。
   即，使用 vfork() 后，父子进程对数据空间的操作会互相影响。
   还有一个区别是，vfork() 创建子进程后，会阻塞父进程，直至子进程执行完。
