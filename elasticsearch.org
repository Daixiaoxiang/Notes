* Overview
  Elasticsearch is a flexible and powerful open source, distributed, real-time
  search and analytics engine. 
  
  有个技术栈是:
  + elasticsearch
	- 提供分布式搜索服务.
	- real time data
	- real time analytics
	- distributed
	- high availability
	- multi-tenancy
	- full text search
	- document oriented
	- conflict management
	- schema free
	- restful api
	- per-operation persistence
	- build on top of apache lucene
  + logstash
	提供实时日志分析服务.
  + kibana
	提供数据可视化服务. 
* 搜索引擎结构
  + 搜索信息 (web crawling)
	爬虫爬取大量信息.
  + 整理信息 (indexing)
	建立索引, 便于快速查询.
  + 接受查询 (searching)
	根据用户的需求返回用户感兴趣的信息.
* 搜索引擎分类
  + 全文搜索引擎 (Full Text Search Engine)
	搜索并返回的是全文的信息
  + 垂直搜索引擎 (Vertical Search Engine)
	搜索某个领域的信息, 如图片、新闻等, 返回的结果可能只与该细分领域有关 
  + 元搜索引擎 (Meta Search Engine)
	结合多个搜索引擎的结果
* REST 查询选项
** 通用选项
   + pretty results
	 - 'pretty=true'  (for debugging only)
	   美化输出的 json 格式数据.
	 - 'format=yaml'
	   会通过 yaml 格式输出.
   + human readable output
	 可添加 'human=true' 形式使得输出 human-readable, 默认值是 false.
   + flat settings
	 The *flat_settings* flag affects rendering of the lists of settings.
** refer
   + [[http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/common-options.html][common options]]
   + [[http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs.html][document apis]]
* 索引 mongo 中的数据
** overview
   可参考 [[https://coderwall.com/p/sy1qcw][这篇文章]]
** 注意点
   + 要使用 mongo replica set
   + 安装 elasticsearch-river-mongodb 后需要重启 ES
   + 可通过 elasticsearch-river-head 查看 ES 建立的索引 
* ES 相关操作
  + Check your cluster, node, and index health, status, and statistics
  + Administer your cluster, node, and index data and metadata
  + Perform CRUD (Create, Read, Update, and Delete) and search operations against your indexes
  + Execute advanced search opertions such as paging, sorting, filtering,
    scripting, faceting, aggregations, and many others
* 常用操作
** 添加索引和数据
   有两种形式添加数据 (ES 会自动创建索引):
   + 指明 id
	 如 (可用 PUT 或 POST 方法):
	 $ curl -XPUT http://localhost:9200/test/person/1?pretty -d '
	   {
         "name": "flyer"
       }'
   + 不指名 id
	 只能用 POST 方法，此时 ES 会自动为该条数据创建一个 id:
	 $ curl -XPOST http://localhost:9200/test/person?pretty -d '
	   {
	     "name": "flyer"
       }'
** 删除索引
   如:
   $ curl -XDELETE 'http://localhost:9200/person'
** 删除数据
   + 精确删除
     如:
     $ curl -XDELETE http://localhost:9200/test/person/1?pretty
   + 匹配删除
	 如:
	 $ curl -XDELETE http://localhost/test/person/_query?pretty -d '
	   {
         "query": {"match": {"age": 25}}
       }'
** 更新数据
   Note that Elasticsearch does not actually do in-place updates under the
   hood. Whenever we do an update, Elasticsearch deletes the old document and
   then indexes a new document with the update applied to it in one shot.

   有三种形式的更新:
   + 类似于插入新数据的形式
   + 用 _update 参数
	 如:
	 $ curl -XPOST http://localhost:9200/test/person/1/_update?pretty -d '
	   {
         "doc": {"name": "Jane Doe", "age": 20}
	   }'
   + 通过脚本
	 如:
	 $ curl -XPOST http://localhost:9200/test/person/1/_update?pretty -d '
	   {
	     "script": "ctx._source.age += 5"
       }'
** 查询
*** 只返回部分结果
	如:
	$ curl -XPOST http://localhost:9200/bank/_search?pretty -d '{
	    "query": {"match_all": {}},
        "_source": ["account_number", "balance"]
	  }'
*** 通过 match 匹配
	$ curl -XPOST 'localhost:9200/bank/_search?pretty' -d '
	  {
	    "query": { "match": { "account_number": 20 } }
      }'
*** 匹配其中任一个
	This example returns all accounts containing the term "mill" or "lane" in
	the address:
	$ curl -XPOST 'localhost:9200/bank/_search?pretty' -d '
	  {
	    "query": { "match": { "address": "mill lane" } }
      }'	
*** 匹配某个短语
	This example returns all accounts containing the phrase "mill lane" in the
	address:
	$ curl -XPOST 'localhost:9200/bank/_search?pretty' -d '
	  {
	    "query": { "match_phrase": { "address": "mill lane" } }
	  }'
*** bool
	文档参考 [[http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html][这里]]

    | Occur    | Description                 |
    |----------+-----------------------------|
    | must     | 必须全部满足，相当于 AND    |
    | should   | 必须至少一个满足，相当于 OR |
    | must_not | 必须都不能满足，相当于 NOT  |

	如:
	$ curl -XPOST 'localhost:9200/bank/_search?pretty' -d '
	{
	  "query": {
        "bool": {
		  "must": [
            { "match": { "age": "40" } }
		  ],
		  "must_not": [
            { "match": { "state": "ID" } }
		  ]
	  }
	}
   }'
** 批量操作
   In addition to being able to index, update, and delete individual documents,
   Elasticsearch also provides the ability to perform any of the above
   operations in batches using the *_bulk* API.
   This functionality is important in that it provides a very efficient
   mechanism to do multiple operations as fast as possible with as little
   network roundtrips as possible.
   如:
   The following call indexes two documents in one bulk operation:
   $ curl -XPOST http://localhost:9200/customer/external/_bulk?pretty -d '
     {
	   {"index":{"_id":"1"}}
	   {"name": "John Doe" }
	   {"index":{"_id":"2"}}
	   {"name": "Jane Doe" }	   
     }'
   Tis example updates the first document and then deletes the second document
   in one bulk operation:
   $ curl -XPOST http://localhost:9200/customer/external/_bulk?pretty -d '
     {
	   {"update":{"_id":"1"}}
	   {"doc": { "name": "John Doe becomes Jane Doe" } }
	   {"delete":{"_id":"2"}}	 
     }'
** _cat
*** 综述
	All the cat commands accept a query string parameter *help* to see all the
	headers and info they provide, and the */_cat* command alone lists all the
	available commands.
*** help
   Each of the commands accepts a query string parameter *help* which will
   output its available columns.
   如:
   $ curl -XGET http://localhost:9200/_cat?help
   $ curl -XGET http://localhost:9200/_cat/master?help
*** verbose
   Each of the commands accepts a query string parameter *v* to turn on verbose
   output.
   如:
   $ curl -XGET http://localhost:9200/_cat/master?v
*** headers
	Each of the commands accepts a query string parameter *h* which forces only
	those columns to appear.
	如:
	$ curl http://localhost:9200/_cat/nodes?h=ip,port,heapPercent,name
*** numeric formats
	如:
	$ curl http://localhost:9200/_cat/indices?bytes=b
** 查看 cluster 状态
   如:
   $ curl http://localhost:9200/_cat/health?v
   或
   $ curl http://localhost:9200/_cluster/health?pretty=true
** 查看 cluster 中所有 nodes
   如:
   $ curl http://localhost:9200/_cat/nodes?v
** 查看 cluster 中所有 indices
   如:
   $ curl http://localhost:9200/_cat/indices?v
** 查看 cluster 中 master node
   如
   $ curl http://localhost:9200/_cat/master?v
** 查看 cluster 的配置
   $ curl http://localhost:9200/_cluster/settings?pretty=true
** 修改 cluster 的配置
   既可在 elasticsearch.yml 中修改，也可以在 ES 运行后，通过类似如下的方式修改:

   $ curl -XPUT http://localhost:9200/_cluster/settings?pretty -d '{
       "persistent": {
	     "discovery.zen.minimum_master_nodes": 1
	   }
     }'
** 查看 node 的状态
   如:
   $ curl http://localhost:9200/_stats?pretty=true
** 查看某个 index 的状态
   如:
   $ curl http://localhost:9200/索引名/_stats?pretty=true
** 查看某个 index 下的所有 mapping
   如:
   $ curl http://localhost:9200/索引名/_mapping?pretty=true
** 查看某个 index 下的某个 type 的 mapping
   如:
   $ curl http://localhost:9200/索引名/type名/_mapping?pretty=true
** 查看所有的 mapping (同时可以查出某个 index 下的所有 type)
   如 
   $ curl http://localhost:9200/_mapping?pretty=true
* cluster 的三种状态
  + green
	*Green* means everything is good (cluster is fully functional).
  + yellow
	*Yellow* means all data is available but some replicas are not yet alloated
    (cluster is fully funtional).
  + red
	*Red* means some data is not available for whatever reason. Note that even
    if a cluster is red, it still is partially functional (i.e. it will continue
    to serve search requests from the available shards) but you will likely
    need to fix it ASAP since you have missing data.
* 索引
  ES 会对全文进行索引.
* 分词
  默认的中文分词是把切分每个中文字, 然后在文档中搜索这些字.
* 搜索分类
  + 搜索某个具体的字段 (精确搜索)
	a structured query on concrete fields like *gender* or *age* , sorted by
    *join_date* , similar to a query that you could construct in SQL.
  + 搜索全文中的某个词 (模糊搜索)
	a full text query, which finds all documents matching the search keywords,
    and returns them sorted by relevance.
  + 以上两者的结合
    or a combination of the two.
* 与搜索相关的三个主题
** Mapping (如何进行索引)
   How the data in each field is interpreted.

   查看 mapping, 如
   $ curl 'http://localhost:9200/twitter/_mapping/tweet'
** Analysis (对查询语句进行分词)
   How full text is processed to make it searchable.
** Query DSL (查询的规则)
   The flexible, powerful query language used by ES.
* 一些特殊变量
** 用于查询方面的
*** _all
   表示所有信息, 如
   + curl -XGET 'http://localhost:9200/_all/_search=referer:"http://www.baidu.com"'
	 查询所有的索引 
   + curl -XGET 'http://localhost:9200/twitter/_all/_search=refer:"http://www.baidu.com"'
	 查询索引名为 'twitter' 的所有类型的文档
*** _search
   在 HTTP API 中表示查询条件.
*** explain
	对查询过程进行解释. 
** 用于解释方面的
*** _index
	表征索引名
*** _type
	表征类型名 
*** _id
	在该 index 和 type 下唯一表征该文档.
*** _shard
	表征分片. 
*** _node
	表征所在的节点. 
*** _score
   在 full-text search 中, 用来表征相关性的强弱, 它是根据具体的查询条件计算出来
   的.
   详情可查看 [[http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/relevance-intro.html][这篇文章]].
*** _explanation
	对查询进行解释
*** _source
	文档的具体内容.
*** _settings
	查看配置
** 查询条件中的变量
   + query
   + match_all
   + size
   + from (0-based)
   + to
   + sort
	 如:
	 $ curl -XPOST http://localhost:9200/bank/_search?pretty -d '{
       "query": {
         "match_all": {}
       },
       "sort":{
         "balance": {"order": "asce"}
       }
     }'

	 其中可按 "desc" 或 "asce" 排序
   + bool

   NOTE:
   + *from* and *size*
	 This feature is useful when implementing paging of search
     results. If *from* is not specified, it defaults to 0.
* 一些特殊的查询条件
** bool 查询
   通过 '+'、'-' 和 'not' 来表示.
* 需要深入的 plugins
  + elasticsearch-mapper-attachment
  + elasticsearch-river-mongodb
* 查询结果的一些字段
  + took
	time in milliseconds for Elasticsearch to execute the search
  + time_out
	tells us if the search timed out or not
  + _shards
	tells us how many shards were searched, as well as a count of the
    successful/failed searched shards
  + hits
	search results
  + hits.total
	total number of documents matching our search criteria
  + hits.hits
	actual array of search results (default to first 10 documents)
* 名词解释
** mapper
   与建索引有关.
** analysis
   与查询时的分词有关.
** river
   数据源
** transport
   使用 ES 的方式.
** gateway (???)
   The gateway allows for persisting the cluster state between full cluster
   restarts. Every change to the state (such as adding an index) will be stored
   in the gateway, and when the cluster starts up for the first time, it will
   read its state from the gateway.
** 官方的文档
   [[http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/_basic_concepts.html][basic concepts]]
   
   + near realtime (nrt)
	 Elasticsearch is a near real time search platform. What this means is a
     slight latency (normally 1 second) from the time you index a document
     until the time it becomes searchable.

	 Elasticsearch provides data manipulation and search capabilities in near
	 real time. By default, you can expect a *one second* delay (refresh
     interval) from the time you index/update/delete your data until the time
     that it appears in your search results. This is an important distinction
     from other platforms like SQL wherein data is immediately available after
     a transaction is completed.
   + cluster
	 A cluster is a collection of one or more nodes (servers) that together
     holds your entire data and provides federated indexing and search
     capabilities across all nodes. A cluster is identified by a unique name
     which by default is "elasticsearch". This name is important because a node
     can only be part of cluster if the node is set up to join the cluster by
     its name. It is a good practice to explicitly set the cluster name in
     production, but it is fine to use the default for testing/development purposes.
   + node
	 A node is a single server that is part of your cluster, stores your data,
     and participates in the cluster's indexing and search capabilities. 
	 Just like a cluster, a node is identified by a name which by default is a
     random Marvel character name that is assigned to the node at startup.
	 A node can be configured to join a specific cluster by the cluster
     name. By default, each node is set up to join a cluster
     named *"elasticsearch"* which means that if you start up a number of nodes
     on your network and assuming they can discover each other, they will
     automatically form and join a single cluster named *"elasticsearch."*.
   + index
	 An index is a collection of documents that have somewhat similar
     characteristics.
	 An index is identified by a name (*that must be all lowercase*) and this
     name is used to refer to the index when performing indexing, search,
     update, and delete operations against the documents in it .

	 In a single cluster, you can define as many indexes as you want.
   + type
	 Within an index, you can define one or more types. A type is a logical
     category/partition of your index whose semantics is completely up to
     you. In general, a type is defined for documents that have a set of common
     fields.
   + document
	 A document is a basic unit of information that can be indexed. This
     document is expressed in JSON.
	 
	 Within an index/type, you can store as many documents as you want. Note
     that although a document physically resides in an index, a document
     actually must be indexed/assigned to a type inside an index.
   + shards & replicas
	 An index can potentially store a large amount of data that can exceed the
     hardware limits of a single node.
	 To solve this problem, Elasticsearch provides the ability to subdivide
     your index into multiple pieces called shards. When you create an index,
     you can simply define the number of shards that you want. Each shard is in
     itself a fully-funcitonal and independent "index" that can be hosted on
     any node in the cluster.
	 
	 Sharding is important for two primary reasons:
	 - It allows you to horizontally split/scale your content volume
	 - It allows you distribute and paralleize operations across shards
       (potentially on multiple nodes) thus increasing performance/throughput.

     The mechanics of how a shard is distributed and also how its documents
     are aggregated back into search requests are completely managed by
     Elasticsearch and is transparent to you as the user.

	 In a network/cloud environment where failures can be expected anytime, it
     is very useful and highly recommended to have a failover mechanism in case
     a shard/node somehow goes offline or disappears for whatever reason. To
     this end, Elasticsearch allows you to make one or more copies of your
     index’s shards into what are called replica shards, or replicas for short.

     Replication is important for two primary reasons:
	 - It provides high availability in case a shard/node fails. For this
       reason, it is important to note that a replica shard is never allocated
       on the same node as the original/primary shard that it was copied from.
	 - It allows you to scale out your search volume/throughput since searches
       can be executed on all replicas in parallel.

     To summarize, each index can be split into multiple shards. An index can
     also be replicated zero (meaning no replicas) or more times. Once
     replicated, each index will have primary shards (the original shards that
     were replicated from) and replica shards (the copies of the primary
     shards). The number of shards and replicas can be defined per index at the
     time the index is created. After the index is created, you may change the
     number of replicas dynamically anytime but you cannot change the number
     shards after-the-fact.

	 By default, each index in Elasticsearch is allocated 5 primary shards and 1
     replica which means that if you have at least two nodes in your cluster,
     your index will have 5 primary shards and another 5 replica shards (1
     complete replica) for a total of 10 shards per index.
* document
  每个 document 必须包含 index、type、id 
* ES 的查询过程
** query phase
   参考 [[http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/_query_phase.html][query phase]].

   这个过程是从 shards 上取出相关 documents 的特征值 (如 id)，如果可能，需要做些
   排序工作，最后确定哪些是用户需要的.
** fetch phase
   参考 [[http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/_fetch_phase.html][fetch phase]].

   根据 query phase 的结果，再从 shards 上取具体的数据，整合后返回给 user.
** 查询的两种形式
*** query
	相比 filer 是重量级的，会计算每个 doc 的 score.
*** filter
	相比 query 是轻量级的，不计算每个 doc 的 score.
* ES 中的 network module
** transport module
   参考 [[http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-transport.html][transport]].

   transport module 用于 cluster 中的 nodes 间通信.这种通信是异步的，好处:
   + 解决 C10k 问题 (即高并发)
   + 会提高 scatter/gather 的效率
** http module
   参考 [[http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-http.html][http]].

   它允许通过 HTTP API 的形式访问 ES 的服务.
   
   这种 http 机制是异步的，主要是为了解决 C10k 问题.
* FAQ
** index 含义
   对数据建立索引, 是抽取出数据中的关键词汇, 然后建立这些词汇和数据的映射关系,
   便于根据关键词快速查找相关数据. 
** doc_type 含义
   不同类型的数据有不同的类型, 如 html、png、text 等，通过指明 doc_type 可以缩小
   在 index 查找的范围.
** id 含义
   精确查找某个 index 中某个 doc_type 中的 id 为多少的一个数据. 
** 精确查找
   根据 index 中的数据的具体字段进行精确查询, 不涉及到结果返回的相关性和评分问题.
** 模糊查找
   根据关键词进行全文查询. 
** 什么是 "单文档查找"
** 什么是 "多文档查找"
** ES 如何建立索引
   In Elasticsearch, all data in every field is indexed by default.That is,
   every field has a dedicated inverted index for fast retrieval. And, unlike
   most other databases, it can use all of those inverted indices in the same
   query, to return results at breathtaking speed.

   Every field in a document is indexed and can be queried. 

   即 ES 对全文进行索引.
** ES 如何处理中文分词
   自带的中文分词是把搜索词拆分成一个个中文字, 然后匹配这些字.
** ES 如何处理搜索条件
   通过 DSL，可查看
   [[http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html][query
   dsl]] 、
   [[http://okfnlabs.org/blog/2013/07/01/elasticsearch-query-tutorial.html#query-dsl-overview][elasticsearch-query-tutorial]]
   和
   [[https://github.com/elasticsearch/elasticsearch-py/blob/master/example/queries.py][queries.py]]
** ES 的插件机制是什么
** 如何使用 ES 分布式特性
** 直接使用二进制的 ES 和安装 ES 的差别在哪儿
** 默认搜索展示的数目
   默认只展示 10 个，可修改参数展示所有的结果.
** ES 中的 shard 和 replica 配置
   来自 ES 的 README.textile:

   By default, an index is created with 5 shards and 1 replica per shard
   (5/1). There are many topologies that can be used, including 1/10 (improve
   search performance), or 20/1 (improve indexing performance, with search
   executed in a map reduce fashion across shards).

   从上述中可以知道:
   + shard 多时，可以提高 index 性能
   + replica 多时，可以提高 search 性能 

   The rule of thumb is:
   + Having more *shards* enhances the _indexing_ performance and allows to
     _distribute_ a big index across machines.
   + Having more *replicas* enhances the _search_ performance and improves the
     cluster _availability_.

  NOTE:
  + The "number_of_shards" is a one-time setting for an index.
  + The "number_of_replicas" can be increased or decreased anytime, by using the
    Index Update Settings API.
** 如何查看集群状态
   如:
   $ curl -XGET http://localhost:9200/_cluster/health?pretty=true
** 如何查看索引状态
   如:
   $ curl -XGET http://localhost:9200/索引名/_status?pretty=true
** 如何查询某个 index 中的所有数据
   如:
   $ curl -XPOST http://localhost:9200/person/_search?pretty -d '
     {
	   "query": {
	     "match_all": {}
	   }
	 }'
   或
   $ curl -XPOST http://localhost:9200/person/_all/_search?pretty -d '
     {
	   "query": {
	     "match_all": {}
	   }
	 }'
** 如何查询某个 type 中的素有数据 
   如:
   $ curl -XPOST http://localhost:9200/persons/person/_search?pretty -d '
     {
	   "query": {
	     "match_all": {}
	   }
	 }'
** 单机节点的 health 为 yellow
   Since we only have one node running at the moment, that one replica cannot
   yet be allocated (for high availability) until a later point in time when
   another node joins the cluster. Once that replica gets allocated onto a
   second node, the health status for this index will turn to green.
** ES1.2 (包括之前的版本) 是否支持批量更新
   不支持。
   Updates can only be performed on a single document at a time. In the future,
   Elasticsearch will provide the ability to update multiple documents given a
   query condition (like an SQL UPDATE-WHERE statement).
** 1.2 之后不再支持 Java1.6  
   可参考 [[http://www.elasticsearch.org/blog/elasticsearch-1-2-0-released/][这篇文档]]
** ES 对 ip:port 的使用
   Elasticsearch, by default, binds itself to the 0.0.0.0 address, and listens
   on port [9200-9300] for HTTP traffic and on port [9300-9400] for
   node-to-node communication. (the range means that if the port is busy, it
   will automatically try the next port).
** ES 的 http api 每个 {} 中的最后一项后面不要加 ','
** ES 一次查询后是否还保留这次查询的状态?
   No.
   It's important to understand that once you get your search results back,
   Elasticsearch is completely done with the request and does not maintain any
   kind of server-side resources or open cursors into your results.
** 最佳的 master 数如何设置
   根据 [[http://asquera.de/opensource/2012/11/25/elasticsearch-pre-flight-checklist/][这篇文档]] , discovery.zen.minimum_master_nodes 至少是 N/2+1，其中 N 是
   node 数.
** ES 中的 "master node" 作用是什么?
   参考 [[http://stackoverflow.com/questions/15019821/what-differents-between-master-node-gateway-and-other-node-gateway-in-elasticsea][这篇文档]]:

   The master node is the same as any other node in the cluster, except that it
   has been elected to be the master.
   
   It is responsible for coordinating any cluster-wide changes, such as as the
   addition or removal of a node, creation, deletion or change of state (ie
   open/close) of an index, and the allocation of shards to nodes. When any of
   these changes occur, the "cluster state" is updated by the master and
   published to all other nodes in the cluster. It is the only node that may
   publish a new cluster state.

   The tasks that a master performs are lightweight. Any tasks that deal with
   data (eg indexing, searching etc) do not need to involve the master. If you
   choose to run the master as a non-data node (ie a node that acts as master
   and as a router, but doesn't contain any data) then the master can run
   happily on a smallish box.
   
   It's responsibility of the master node to allocate the shards equally among
   the nodes.
** split-brain problem
   参考 [[http://blog.trifork.com/2013/10/24/how-to-avoid-the-split-brain-problem-in-elasticsearch/][HOW TO AVOID THE SPLIT-BRAIN PROBLEM IN ELASTICSEARCH]]
** ES 的查询过程是什么?
    可参考 [[http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/_query_phase.html][query phrase]]:
	1. ES 的某个 node 接受 request，然后将该 request 广播到指定的 index 的
       primary/replica shard 上
	2. 每个 shard 执行 search 操作，将查询结果放入一个 priority queue 中 (根据查
       询到的 doc 的 score 排序)
	3. 接受 request 的 node 将查询结果收集起来，放入到一个 priority queue 中，然
       后根据 request 的其它参数做些操作，如排序、取哪段数据等，然后将结果返回
       给 user.

    NOTE:
	+ 假设 request 中指定 from: 90、size: 10，则对应的每个 shard 上需要返回
      90+10 个数据给接受 request 的 node
** ES 中 node.data 设为 false 时，shard 是否会分配在该 node 上？
   不会。

   参考 [[http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-node.html][node]]:
   elasticsearch allows to configure a node to either be allowed to store data
   locally or not. Storing data locally basically means that shards of different
   indices are allowed to be allocated on that node.
* 影响 ES 性能的因素
** JVM swap
   Elasticsearch performs poorly when JVM starts swapping: you should ensure
   that it _never_ swaps.

   Make sure that the ES_MIN_MEM and ES_MAX_MEM environment variables are set to
   the same value, and that the machine has enough memory to allocate for
   Elasticsearch, leaving enough memory for the operating system itself.

   You should also make sure that the Elasticsearch process is allowed to lock
   the memory, eg. by using `ulimit -l unlimited`.
   
   RESOLVE:
   + (解决问题 1) 修改 ES 配置文件中的参数:
	 - 修改 bootstrap.mlockall: true
	 - NOTE:
	   + 最好不要设置为 true，否则内存不会释放，造成大量内存被占用
* CentOS 上管理 elasticsearch
  通过 yum 安装 ES 后，通过 service 运行 ES:
  
  启动 ES:
  $ sudo service elasticsearch start

  停止 ES:
  $ sudo service elasticsearch stop

  重启 ES:
  $ sudo service elasticsearch restart
* 思考
** 对 port 的分配
   设计分布式服务时，通常会涉及到 port 的分配。若在配置文件中只能指定一个 port，
   则容易出现端口占用的情况。
   ES 的设计有个比较好的敌方，它指定一个 port 范围，依次尝试绑定到某个 port 上，
   直至成功。
