* mac 上配置 Emacs 的 erlang 环境
  可参考 [[http://chrsve.tumblr.com/post/52863898771/howto-install-and-get-erlang-up-and-running-on-mac-os][这篇文章]].
* erlang 进程
  它不是 OS 中的进程，而是一个由 Erlang 系统管理的轻量级进程。
  一个 Erlang 进程就是一个小小的虚拟机，可以执行单个 Erlang 函数。
* 变量绑定
  Erlang 的变量只能绑定一次。
* 变量的命名
  Erlang 的变量以大写字母开头. 
* 原子
  常量以小写字母开头，被成为原子(atom).

  原子以小写字母开头，后接一串字母、数字、下划线或 @ 符号。
  原子还可以放在单引号 (') 内，可以用这种引号形式创建以大写字母开头或包含字母数
  字以外字符的原子，甚至可以给无需引号的原子加上引号 (等价).

  一个原子的值就是它本身。
* 单引号和双引号
  Erlang 中，单引号表示原子，双引号用于给字符串字面量 (string literal) 定界.
* 函数式语言和命令式语言的区别
  + 在函数式语言里，变量不能改变，而在命令式语言里可以.
* 注释
  行注释，以 '%' 开头.
* 一些概念
** 容错性
   容错的关键是 *独立性* 和 *硬件冗余* 。 
** "并发" 和 "并行"
   "并发性" 与 *软件结构* 有关，"并行性" 与 *硬件* 有关。
** 一些总结
   编程语言有两种：顺序和并发。顺序语言被设计用于编写顺序程序，没有描述并发计算
   的语言结构。并发编程语言被设计用于编写并发程序，语言本身带有表达并发性的特殊
   结构。

   在 Erlang 里，并发性由 Erlang 虚拟机提供，而非 OS 或任何外部库。
   在大多数顺序编程语言里，并发性都以接口的形式提供，指向主机 OS 的内部并发函数。

   区分基于 OS 的并发和基于语言的并发很重要，因为如果使用基于 OS 的并发，那么程
   序在不同的 OS 上就会有不同的工作方式。Erlang 的并发在所有 OS 上都有着相同的工
   作方式。要用 Erlang 编写并发程序，只需要掌握 Erlang，而不必掌握 OS 的并发机制。

   在 Erlang 里，进程和并发是我们可以用来定型和解决问题的工具。这让细粒度控制程
   序的并发结构成为可能，而用 OS 的进程是很难做到的。 
