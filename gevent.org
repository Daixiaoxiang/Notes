* Cooperative multitasking
  The greenlets all run _in the same OS thread_ and scheduled
  cooperatively. This means that until a particular greenlet gives up control,
  by calling a blocking function that will switch to the Hub, other greenlets
  won't get a chance to run.
  It's typically not an issue for an I/O bound app, but one should be aware of
  this when doing something CPU intensive or calling blocking I/O functions
  that bypass libevent event loop.
* Lightweight pseudothreads
  The greenlets are spawned by creating a Greenlet instance and calling
  its *start* method (the *spawn()* function is a shortcut that does exactly
  that). The *start* method schedules an *event* that will switch to the
  greenlet created, as soon as the current greenlet gives up control. If there
  is more than one active event, they will be executed one by one, in an
  undefined order.

  *Greenlet* instance has a number of useful methods:
  + *join*
	waits until the greenlet exits.
  + *kill*
	interrupts greenlet's execution.
  + *get*
	returns the value returned by greenlet or re-raised the exception that
    killed it.

  It is possible to customize the string printed after the traceback by
  subclassing *Greenlet* class and redefining its *__str__* method.

  To subclass a *Greenlet*, overrides its *_run()* method and
  call *Greenlet.__init__(self)* in *__init__()*.

  Greenlets can be killed asychronously. Killing will resume the sleeping
  greenlet, but instead of continuing execution, a *GreenletExit* will be
  raised.

  The *GreenletExit* exception and its subclasses are handled differently than
  other exceptions. Raising *GreenletExit* is not considered an exceptional
  situation, so the traceback is not printed. The *GreenletExit* is returned
  by *get()* as if it was returned by the greenlet, not raised.

  The *kill()* also accept a *timeout* argument specifying the number of
  seconds to wait for the greenlet to exit. 
  However, *kill()* cannot guarantee that the target greenlet will not ignore
  the exception and thus it's a good idea always to pass a timeout to *kill()*.
* Timeouts
** knowledge
   Many functions in the gevent API are synchronous, blocking the current
   greenlet until the operation is done. Many of those functions can be made
   asynchronous by passing *block=False* argument.
   
   Furthermore, many of the synchronous functions accept *timeout* argument,
   which specifies a limit on how long the function could block.
   
   When these are not enough, the *Timeout* class can be used to add timeouts to
   arbitrary seconds of (yielding) code.
** 我的理解
   对于 gevent API，大多是同步的，变成异步的方法:
   + 参数中设置 *block=False*
   + 参数中加入 *timeout*
   + 使用时加入 *Timeout* 类
  
