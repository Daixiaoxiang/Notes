* 大小写
  Javascript 对大小写敏感。
* js 放置位置
** 位于 head 部分
   当脚本被调用时，或者当事件被触发时，脚本就会被执行。当把脚本放置到 head 部分
   后，就可确保在使用脚本之前，它已经被载入。
** 位于 body 部分
   在页面载入时脚本就会被执行，当把脚本置于 body 部分后，它就会生成页面的内容。
** 外部调用
   也可通过
   <script src="path/xxx.js">
   的方式调用外部的 js 脚本
* js 语句作用
  Javascript 是发给浏览器的命令，这些命令的作用是告诉浏览器要做的事情。
  浏览器通过两种方式认定 Javascript 一条语句的结束:
  1)分号
  2)行末
* js 注释
  方法同 C .
* js 变量
  通过 var 关键字重新声明变量时，该变量不会丢失原来的值。

  js 的变量必须以 _字母_ 或 _下划线_ 或 '$' 开头。

  A variable declared without a value will have the value *undefined*.
* 比较运算符
  有个特殊的比较运算符是 ===，它和 == 都是比较是否相等，只是 === 更严格，会检查
  值和类型是否都相同。
* 三元运算符
  C 中的 :? 运算符也可以使用。
* if 语句
  用法完全同 C。
* switch 语句
  用法完全同 C 中的 switch 语句。
* 消息框
** 警告框
   它长用于确保用户可以得到某些信息，当警告框出现后，用户需要点击确定按钮才能继
   续进行操作。
   如下的函数例子:

   function disp_alert()
   {
   alert("再次向您问好！在这里，我们向您演示" + '\n' + "如何向警告框添加折行。")
   }
** 确认框
   它用于使用户可以验证或接受某些信息。当确认框出现后，用户需要点击"确认"或"取消"
   按钮才能继续进行操作。若用户点击"确认"，则返回值为 true，若点击"取消"，则返回
   值为 false。
   如下的函数例子:

   function show_confirm()
   {
   var r=confirm("Press a button!");
   if (r==true)
   {
   alert("You pressed OK!");
   }
   else
   {
   alert("You pressed Cancel!");
   }
   }
** 提示框
   它常用于提示用户在进入页面前输入某个值。当提示框出现后，用户需要输入某个值，
   然后点击"确认"或"取消"按钮才能继续操作。若用户点击"确认"，则返回值为输入的值，
   若用户点击"取消"，则返回值为 null.
   如下的函数例子:

   function disp_prompt()
   {
   var name=prompt("请输入您的名字","Bill Gates")
   if (name!=null && name!="")
   {
   document.write("你好！" + name + " 今天过得怎么样？")
   }
   }
* 函数
  函数的参数、返回值和 C 一样，只是可以不指明参数的类型。
* for 语句
  它有两种用法，分别和 C、Python 中的 for 用法类似。
  注意下面这个例子，理解 Javascript 把内容输出给浏览器，然后浏览器负责格式化显示
  内容:
  for (i = 1; i <= 6; i++)
  {
  document.write("<h" + i + ">这是标题 " + i)
  document.write("</h" + i + ">")
  }
* while 和 do...while 语句
  用法同 C 中一样。
* break 和 continue 语句
  用法同 C 中的一样。
* for...in 语句
  用来对数组或对象的属性进行循环操作，循环中的代码每执行一次，就会对数组的元素或
  对象的属性进行一次操作。
  
  例子:
  var x
  var mycars = new Array()
  mycars[0] = "宝马"
  mycars[1] = "奔驰"
  mycars[2] = "宾利"
  
  for (x in mycars)
  {
  document.write(mycars[x] + "<br />")
  }
* js 事件
  这些很有用处，可参考 w3school 列出的事件。
* try...catch... 语句
  例子:
  function message()
  {
  try
  {
  addalert("Welcome guest!")
  }
  catch(err)
  {
  txt="There was an error on this page.\n\n"
  txt+="Click OK to continue viewing this page,\n"
  txt+="or Cancel to return to the home page.\n\n"
  if(!confirm(txt))
  {
  document.location.href="http://www.w3school.com.cn/"
  }
  }
  }
* throw 语句
  作用是创建 exception (异常或错误)。可把这个声明与 try...catch 声明配合使用，以
  达到控制程序流并产生精确错误消息的目的。
  例子:
  
  var x=prompt("Enter a number between 0 and 10:","")
  try
  { 
  if(x>10) 
  throw "Err1"
  else if(x<0)
  throw "Err2"
  } 
  catch(er)
  {
  if(er=="Err1") 
  alert("Error! The value is too high")
  if(er == "Err2") 
  alert("Error! The value is too low") 
  }

* String 对象
** 作用
   用于处理已有的字符串.
* Date 对象
** 作用
   用于处理日期和时间。
   Date 对象自动使用当前的日期和时间作为其初始值。
** 获取当前月的最后一天
   假设当前的日期对象为 obj_date,则获得当前月的最后一天的日期方法为:
   
   obj_date.setDate(0);
** NOTE
   在声明 Date() 对象后,不能直接在声明中直接使用该对象的 *setTime()* 方法,可能会
   报错.一般是在声明全部结束后再写条语句执行 *setTime()* 方法.
* Array 对象
* Boolean 对象
* Math 对象
** 作用
   执行常见的算数任务。
* RegExp 对象
* Javascript HTML DOM 对象
* Cookie
** 作用
   它是存储于访问者的计算机中的变量，每当同一台计算机通过浏览器请求某个页面时，
   就会发送这个 cookie。可使用 Javascript 来创建和取回 cookie 的值。
* 创建自己的对象
* 一些关于 AJAX 的事实
  Ajax uses *HTTP* as a transport mechanism and HTTP  wasn't designed for
  real-time communication. When a message is sent using HTTP, a new TCP/IP
  connection must be used. Opening and closing connections takes time and the
  size of the data transfer is larger since HTTP headers are sent on every
  request.
* typeof() 返回的 6 种类型
  "object"、"boolean"、"function"、"number"、"string"、"undefined"
* 大小写
  JavaScript 对大小写敏感
* 特殊的值
  | null      | it means 'no value' |
  | undefined | like null           |

* object and array 简单用法
  An *object* is a collection of name/value pairs, or a string to value map.它的
  key 不需要加引号.
  
  例子:
  
  var book = {
      topic: "JavaScript",
	  fat: true,
  }

  book.topic
  book["fat"]					// 访问 object 的元素有两种方法
  book.author = "flyer":		// 可向 object 动态添加元素
  book.contents = {};

  var primes = [2, 3, 5, 7,];
  primes[0]
  primes.length
  primes[4] = 9;				// array 也可动态添加元素
  
  var points = [
      {x: 0, y: 0},
	  {x: 1, y: 1},
  ]

  var data = {
      trival1: [ [1, 2], [3, 4]],
	  trival2: [ [2, 3], [4, 5]],
  }
* 数据类型
  number, string, boolean, null, undefined, object
  
  array 和 function 是 object 的一种特殊形式.

  JavaScript has only one type of numbers.
  Numbers can be written with, or without decimals.
  Extra large or extra small numbers can be written with scientific
  (exponential) notation.

  Boolean: true/false.

  判断类型的操作符: typeof.
* functions
** 命名规则
   Function names can contain letters, digits, underscores, and dollar signs
   (same rules as variables).
** summary
   它是 object 的一种特殊形式.

   The most important thing about functions in JavaScript is that they are true
   values and that JavaScript programs can treat them like regular objects.

   Functions that are written to be used (with the *new* operator) to initialize
   a newly created object are known as *constructor* . Each constructor defines
   a /class/ of objects -- the set of obejcts initialized by that constructor.
** invocation
   The code inside the function will execute when "something" invokes (calls)
   the function:
   + when an event occurs (e.g. when a user clicks a buttont)
   + when it is invoked (called) from JavaScript code
   + automatically (self invoked)
* JavaScript 定义的三种类
  Date, RegExp, Error

* 没有 method 的类型
  *null* and *undefined* are the only values that methods cannot be invoked on.
* garbage collection
  The JavaScript interpreter performs automatic /garbage collection/ for memory
  management.

* 变量的作用域
  Variables declared outside of a function are *global variables* and are
  visible everywhere in a JavaScript program.

  Variables declared inside a function have *function scope* and are visible
  only to code that appears inside that function.
* number
** 综述
   All numbers in JavaScript are represented as *floating-point*
   values. JavaScript represents numbers using the 64-bit floating-point format
   defined by the IEEE 754 standard.
   
   Certain operations in JavaScript (such as array indexing and the bitwise
   operators) are performed with 32-bit integers.
** 八进制数使用注意
   Since some implementations support octal literals and some do not, you should
   never write an integre literal with a leading zero; you cannot know in this
   case whether an implementation will interpret it as an octal or decimal
   value. In the strict mode of ECMASript5, octal literals are explicitly
   forbidden.

** overflow and underflow
   当操作 number 时出现 overflow 或 underflow 时，会返回 *Infinity* 或
   *-Infinity* .
** 除以 0
   Division by zero is not an error in JavaScript: it simply returns *Infinity*
   or *-Infinity* . There is one exception, however: zero divided by zero does
   not have a well-defined value, and the result of this operation is the
   special not-a-number value, printed as *NaN* .

   *NaN* also arises if you attempt to 
   + divide infinity by infinity
   + take the square root of a negative number 
   + use arithmetic operators with non-numeric operands that cannot be converted
     to numbers
     non-numeric operands that 

** 比较 NaN
   The *NaN* value has one unusual feature in JavaScript: it does not compare
   equal to any other value, including itself. This means that you can't write 
   /x == NaN/ to determine whether the value of a variable /x/ is /NaN/
   . Instead, you should write /x != x/ . That expression will be true if, and
   only if, /x/ is /NaN/ .

   The function *isNaN()* is similar. It returns *true* if its argument is *NaN*
   , or if that argument is a non-numeric value such as a string or an
   object. The related function *isFinite()* returns *true* if its arguments is
   a number other than /Nan/, /Infinity/ , or /-Infinity/.
** 比较 0 和 -0
   The negative zero value is also somewhat unusual. It compares equal (even
   using JavaScript's strict equality test) to positive zero, which means that
   the two values are almost indistinguishable, except when used as a divisor.

* text/string
** 综述
   A *string* is an immutable ordered sequence of 16-bit values, each of which
   typically represents a Unicode character --- strings are JavaScript's type
   for representing text. The *length* of a string is the number of 16-bit
   values it contains. JavaScript's strings (and its arrays) use zero-based
   indexing: the first 16-bit value is at position 0, the second at position 1
   and so on. The /empty string/ is the string of length 0. JavaScript does not
   have a special type that represents a single element of a string.
* boolean
  以下几个被认为是 false:
  + undefined
  + null
  + 0
  + -0
  + NaN
  + ""  						// the empty string

* null 和 undefined
  若通过 '==' 来比较，返回 true，若通过 '===' 来比较，返回 false.

* object 之间的比较
  Two object values are the same if and only if they refer to the same
  underlying object.

  即:

  var o = {x: 1};
  var p = {x: 1};
  o === p 返回 false
  
  var a = [], b = [];
  a === b 返回 false

  var a = [];
  var b = a;
  b[0] = 1;
  a[0] 返回 1
  a === b 返回 true
* JSON
** 简介
   JSON: JavaScript Object Notation, JavaScript 对象表示法。
   JSON 是存储和交换文本信息的语法，类似 XML。
   JSON 比 XML 更小、更快、更易解析。
   JSON 是轻量级的文本数据交换格式。
   JSON 独立于语言，虽然使用 JavaScript 语法来描述数据对象，但 JSON 仍独立于语言
   和平台，JSON 解析器和 JSON 库支持许多不同的编程语言。
** JSON 语法
*** 语法规则
	JSON 语法是 JavaScript 对象表示法语法的子集。
	1)数据在 名称/值 对中。
	2)数据由逗号分隔。
	3)花括号保存对象。
	4)方括号保存数组。
*** JSON 名称/值 对
	JSON 数据的书写格式是: 名称/值 对. 如 
	"firstname": "John"
*** JSON 值
	JSON 值可以是:
	1)数字(整数或浮点数)
	2)字符串(在双引号中)
	3)逻辑值(true 或 false)
	4)数组(在方括号中)
	5)对象(在花括号中)
	6)null
*** JSON 对象
	JSON 对象在花括号中书写，如:
	{"firstname":"John", "lastname":"Doe"}
*** JSON 数组
	JSON 数组在方括号中书写，数组可包含多个对象.如:
	{
	"employee": [
	{"firstname":"John", "lastname":"Doe"},
	{"firstname":"Anna", "lastname":"Smith"},
	{"firstname":"Peter", "lastname":"Jones"}
	]
	}
*** JSON 使用 JavaScript 语法
	因为 JSON 使用 JavaScript 语法，故无需额外的软件就能处理 JavaScript 中的
	JSON.
*** JSON 文件
	JSON 文件的文件类型是 ".json";
	JSON 文本的 MIME 类型是 "application/json".
*** JSON 使用
	JSON 最常见的用法之一，是从 web 服务器上读取 JSON 数据(作为文件或作为
	HttpRequest), 将 JSON 数据转换为 JavaScript 对象，然后在网页中使用该数据。
	eval() 函数使用的是 JavaScript 编辑器，可解析 JSON 文本，然后生成 JavaScript
	对象。必须把文本包围在括号中，这样才能避免语法错误.
	如下例子:
	
	<html>
	<body>
	<h2>通过 JSON 字符串来创建对象</h3>
	<p>
	First Name: <span id="fname"></span><br /> 
	Last Name: <span id="lname"></span><br /> 
	</p> 
	<script type="text/javascript">
	var txt = '{"employees":[' +
	'{"firstName":"Bill","lastName":"Gates" },' +
	'{"firstName":"George","lastName":"Bush" },' +
	'{"firstName":"Thomas","lastName":"Carter" }]}';
	
	var obj = eval ("(" + txt + ")");
	
	document.getElementById("fname").innerHTML=obj.employees[1].firstName 
	document.getElementById("lname").innerHTML=obj.employees[1].lastName 
	</script>
	</body>
	</html>
* 获取 object 的所有属性名
  通过如下方法:

  Object.keys(对象)

* prop vs. attr
  主要区别:
  + *Attributes* are defined by HTML.
  + *Properties* are defined by DOM.
  + Use *prop()* over *attr()* in the majority of cases.
  + *prop()* is the current state of the input element, *attr()* is the defautl value.
  + *prop()* can contain things of different types, *attr()* can only contain strings.
  + A *property* is in the DOM; an *attribute* is in the HTML that is parsed
    into the DOM.

  Some HTML attributes have 1:1 mapping onto properties. *id* is one example of
  such.
  Some do not (e.g. the *value* attribute specifies the initial value of an
  input, but the *value* property specifies the current value).

  If you change an *attribute*, the change will be reflected in the DOM
  (sometimes with a different name). e.g. changing the *class* attribute of a
  tag will change the *className* property of that tag in the DOM.
  If you have no attribute on a tag, you still have the correspoding DOM
  property with an empty or default value. e.g. while your tag has no *class*
  attribute, the DOM property *className* does exist with an empty string value.
  If you change the one, the other will be changed by a controller, and vice
  versa. This controller is not in jQuery, but in the browsers' native code.

  A DOM element is an object, a thing in memory. Like most objects in OOP, it
  has properties. It also has a map of the attributes defined on the element
  (usually coming from the markup that the browser read to creatd the element).


  Ref:
  + [[http://stackoverflow.com/questions/5874652/prop-vs-attr][.prop() vs
    .attr()]]
* Output 
  JavaScript does not have any built-in print or display functions.

  JavaScript can "display" data in different ways:
  + Writing into an alert box, using *window.alert()*
  + Writing into the HTML output using *document.write()*
  + Writing into an HTML element, using *innerHTML*
  + Writing into the browser console, using *console.log()*
* objects
  The *name:values* pairs (in JavaScript objects) are called *properties*.

  Methods are actions that can be performed on objects.
  Methods are stored in properties as function definitions.
  
  When a JavaScript variable is declared with the keyword *new*, the variable is
  created as an object.
  Avoid *String*, *Number* and *Boolean* objects and do not declare *Strings*,
  *Numbers* and *Booleans* as objects. They complicate your code and slow down
  execution speed.
* scope
  If you assign a value to a variable that has not been declared, it will
  automatically become a *GLOBAL* variable even if in a function.

  With JavaScript, the global scope is the complete JavaScript environment.
  In HTML, the global scope is the *window* object: All global variables belong
  to the *window* object.

  Local variables are deleted when the function is completed.
  Global variables are deleted when you close the page.

  Function arguments work as local variables inside functions.
* events
  HTML events are "things" that happen to HTML elements.
  When JavaScript is used in HTML pages, JavaScript can "react" on these events.

  An HTML event can be something the browser does, or something a user does.
  
  HTML allows event handler attributes, with JavaScript code, to be added to
  HTML elements, e.g.:
  <button onclick='getElementById("demo").innerHTML=Date'>The time is?</button>
  <button onclick="this.innerHTML=Date()">The time is?</button>
  <button onclick="displayDate()">The time is?</button>
