* 对 if-elif-else 多条语句的简化
  比如有如下语句

  if user.cmd == 'create':
  action = 'create item'
  elif user.cmd == 'delete':
  action = 'delete item'
  elif user.cmd == 'update':
  action = 'update item'
  else:
  action = 'invalid choice ... try again!'

  /优化1/：
  if user.cmd in ('create', 'delete', 'update'):
  action = '%s item' % user.cmd
  else:
  action = 'invalid choice ... try again!'

  /优化2/:
  msgs = {'create': 'create item',
  'delete': 'delete item',
  'update': 'update item'}
  default = 'invalid choice ... try again!'
  action = msgs.get(user.cmd, default)
  
  One well-known benefit of using mapping types such as dictionaries is that
  the searching is very fast compared to a sequential lookup as in the above
  /if-else-else/ statements or using a /for/ loop, both of which have to scan
  the elements one at a time.  

* enumerate(fp)
  若 enumerate() 的参数是文件描述符，则返回的是
  [行号，对应行的内容]
* 生成器表达式
  类似于 *列表推导* ,只是把 *列表推导* 的方括号换成了圆括号。 *列表推导* 生成的
  是 list 类型的数据， *生成器表达式* 生成的是 iterator object。因此在使用时，
  *生成器表达式* 比 *列表推导* 更省内存。

* sorted() 用法
  它的排序不是 'IN PLACE', 原型:

  sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list
  
  用法举例:
  最基本的用法:
  >>> print sorted([5, 2, 3, 1, 4])
  [1, 2, 3, 4, 5]
  
  根据每项的第二项数据的大小排序
  >>> L = [('b',2),('a',1),('c',3),('d',4)]
  >>> print sorted(L, cmp=lambda x,y:cmp(x[1],y[1]))
  [('a', 1), ('b', 2), ('c', 3), ('d', 4)]

  根据每项的第二项数据排序，效果同上，但比上者快
  >>> L = [('b',2),('a',1),('c',3),('d',4)]
  >>> print sorted(L, key=lambda x:x[1]))
  [('a', 1), ('b', 2), ('c', 3), ('d', 4)]

  先根据每项的第二项数据排序，在根据每项的第一项数据排序
  >>> L = [('d',2),('a',4),('b',3),('c',2)]
  >>> print sorted(L, key=lambda x:(x[1],x[0]))
  [('c', 2), ('d', 2), ('b', 3), ('a', 4)]

  对排序后的结果反序输出
  >>> print sorted([5, 2, 3, 1, 4], reverse=True)
  [5, 4, 3, 2, 1]
  >>> print sorted([5, 2, 3, 1, 4], reverse=False)
  [1, 2, 3, 4, 5]
* 函数的默认值
  一个函数的默认值只会被求值依次，仅此一次，求值在函数被定义的时候发生(即 def 语
  句被执行的时候)。
  这句话的意思是，若多次引用同一个函数，则这些操作中，函数的默认值是同一个，可通
  过 id() 函数来验证。可通过 decorator 来修改这种行为。
* descriptor
  它提供了访问 "私有变量" 的方法，为 get、set、delete 这些变量提供了控制方法，使
  之在 get、set、delete 时能够提供其它的操作，如检查变量的正确性、改变变量的大小
  写等操作。
  descriptor 仅是个 object.
  常见的有 property()

  使用 descriptor 时需要满足的条件:

  + You have a new-style class
  + It has some object as a class attribute
  + That object's class has the appropriate special descriptor method.

  A descriptor will not work if it's assigned to an object instead of a class,
  and an object is not a descriptor if you assign the object a function named
  /__get__/. 
  Descriptors are all about modifying behavior for classes, not individual
  objects.

  A descriptor simply implements /__get__/ , /__set__/ ,etc. and is then added
  to another class in its definition.
* decorator
  它提供了修改函数行为的方法。
* self、cls
  它们都不是 python 中的关键字，可通过 ipython 中输入 'keywords' 来查看所有的关
  键字。

  在类中，可用任何单词取代这两个单词，因为在 Python 中一切皆对象，类中方法的第一
  个参数是类的实例，所以可以用任何单词来表示。
  self、cls 只是惯用，而不是关键字。
* encoding/decoding
  根据 PEP-0263 的解释，在 py 文件前两行中的某行加入符合
  'coding[:=]\s*([-\w.]+)' 正则的编码，会指导 Python 解释器采用指定的编码方式编
  码 python 源文件中的代码。
  print 等函数会在打印时会对数据进行转码，但 file 模块中的 write 等操作不会。
  在实践过程中发现一个问题，得需要使用 sys.setdefaultencoding() 来来改变 Python
  的默认编码(ASCII)，否则若把中文写入到文件中时，会提示编码错误。
  这里有个疑问，不知为什么会需要设置。

  还可参考 PEP-100 看下对 *the Unicode Implementation* 的解释。
* 添加模块查询路径
  与 PYTHONPATH 环境变量有关,可在 site-packages/ 或 PYTHONPATH 的任何 *.pth* 文
  件来添加 PYTHONPATH
* 有时为什么要写 if __name__ == '__main__'
  这在测试模块时非常有帮助. Python 解释器会从头至尾执行缩进级别为 0 的代码,会自
  动为每个 module 设置一个 '__name__' 变量,若不是通过 import 载入该模块,则
  '__name__' 被赋予值 '__main__',若是通过 import 载入该模块,则 '__name__' 被赋予
  模块的文件名(除去路径和后缀).

  通常在写完一个 module 后在当前的 module 文件中进行验证,加上上述语句时,会自动执
  行该语句下的代码,而在通过 import 载入该 module 时,由于此时模块的 '__name__' 已
  经被置为模块名而不是 '__main__',此时不会执行上述语句下面的代码.

  通过 if __name__ == '__main__' 语句,使得这个 python 文件既可以作为一个可复用的
  模块使用,又可以作为一个独立的程序使用.

  参考:
  http://stackoverflow.com/questions/419163/what-does-if-name-main-do
  http://ibiblio.org/g2swap/byteofpython/read/module-name.html
  http://blog.csdn.net/shark0001/article/details/1363154

* 在 iPython 中计算某些语句的执行时间
  可在 iPython 中通过如下的形式来使用

  timeit -n 次数 要测试的语句
* 使用清华的 pypi 源
  如:
  
  $ python install -i http://e.pypi.python.org/simple 软件
